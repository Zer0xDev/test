from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, Message
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, FSInputFile, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
import asyncio
import datetime
import re
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery
import aiogram.utils.markdown as fmt
from openai import OpenAI

import keyboards as kb
import requests
import json

bot = Bot(token="7848224373:AAFOqRSfTnjJG_sJGNvNsbY4gtmEdijOWVk")
dp = Dispatcher()

class DataAll(StatesGroup):
    isAsking = State()
    model = State()

@dp.message(Command('start'))
async def WelcomeMessage(message: Message):
    await message.answer_photo(photo="AgACAgIAAxkBAAIBC2gTsp0welf6a_ohAAGEz17zAtaJlQACiP0xG9gooEjpT54ONxBU6wEAAwIAA3kAAzYE", parse_mode="html", caption="üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ <b>teleAI.</b> –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ <b>Gemini Flash 2.0, DeepSeek</b> –∏ –¥—Ä—É–≥–∏–µ.\n\nüî• –ò –í—Å–µ –æ–Ω–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã :D</b>", reply_markup=kb.user)

@dp.message(F.text == "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
async def SelectAI(message: Message):
    await message.answer_photo(photo="AgACAgIAAxkBAAIBCWgTskd8hOOgIRadfx36kQhSGQPbAAKG_TEb2CigSD3H3uTP2OZEAQADAgADeQADNgQ", caption="üëå –û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å:", reply_markup=kb.ais)

@dp.message(F.text == "[–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô] ‚ö°Ô∏è Gemini Flash 2.0")
async def EnterMessage1(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ‚ö°Ô∏è Gemini Flash 2.0\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="google/gemini-2.0-flash-001")

@dp.message(F.text == "üê≥ DeepSeek")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: üê≥ DeepSeek\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="deepseek/deepseek-chat-v3-0324")

@dp.message(F.text == "‚ö°Ô∏è Gemini Flash 1.5")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ‚ö°Ô∏è Gemini Flash 1.5\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="google/gemini-flash-1.5")

@dp.message(F.text == "ü¶ï Meta Llama 4 Scout")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ü¶ï Meta Llama 4 Scout\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="meta-llama/llama-4-scout")

@dp.message(F.text == "ü•ù Gemma 3 4B")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ü•ù Gemma 3 4B\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="google/gemma-3-4b-it")
@dp.message(F.text == "üëæ Qwen3 8B")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: üëæ Qwen3 8B\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="qwen/qwen3-8b")

@dp.message(F.text == "üéÉ Ministral Small 3")
async def EnterMessage2(message: Message, state: FSMContext):
    await message.answer("‚û°Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: üéÉ Mistral Small 3\n\nüí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
    await state.set_state(DataAll.isAsking)
    await state.update_data(model="mistralai/mistral-small-24b-instruct-2501")

@dp.message(F.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def EnterMessage2(message: Message):
    await message.answer_photo(photo="AgACAgIAAxkBAAIBC2gTsp0welf6a_ohAAGEz17zAtaJlQACiP0xG9gooEjpT54ONxBU6wEAAwIAA3kAAzYE", parse_mode="html", caption="üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ <b>teleAI.</b> –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–æ–¥–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ <b>Gemini Flash 2.0, DeepSeek</b> –∏ –¥—Ä—É–≥–∏–µ.\n\nüî• –ò –í—Å–µ –æ–Ω–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã :D</b>", reply_markup=kb.user)

@dp.message(F.text, DataAll.isAsking)
async def GetAnswer(message: Message, state: FSMContext):
    await message.answer("‚åõÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç...")
    data = await state.get_data()
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key="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",
    )

    completion = client.chat.completions.create(
        extra_headers={
            "HTTP-Referer": "<YOUR_SITE_URL>", # Optional. Site URL for rankings on openrouter.ai.
            "X-Title": "<YOUR_SITE_NAME>", # Optional. Site title for rankings on openrouter.ai.
        },
        extra_body={},
        model=data.get("model"),
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": message.text
                    }
                ]
            }
        ]
    )

    answer = "‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç!\n\n‚û°Ô∏è " + completion.choices[0].message.content + "\n\n"

    await message.answer(answer, reply_markup=kb.ais)

    await state.clear()


@dp.message(F.text == "‚ùì FAQ")
async def FAQMessage(message: Message):
    await message.answer(parse_mode="html", text="‚ùì <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n - –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—É—é –º–æ–¥–µ–ª—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É, –∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n‚ùì <b>–ë—É–¥—É—Ç –ª–∏ –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –±–æ—Ç–µ?</b>\n\n - –î–∞, —è —Å—Ç–∞—Ä–∞—é—Å—å –¥–æ–±–∞–≤–ª—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –∏—Ö –≤—ã—Ö–æ–¥–∞ :D (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)\n\n‚ùì <b>–ö–∞–∫–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ?</b>\n\n - ‚ö°Ô∏è Gemini Flash 2.0", reply_markup=kb.user)

@dp.message(F.text == "üìä Up-time")
async def FAQMessage(message: Message):
    await message.answer(parse_mode="html", text="üìä Up-time –º–æ–¥–µ–ª–µ–π: \n\nGemini Flash 2.0: üü©üü©üü©\nDeepSeek: üü•üü®üü®\nGemini Flash 1.5: üü©üü©üü©\nLlama Scout 4: üü©üü©üü©\nGemma 3 4B: üü©üü©üü©\nQwen3 8B: ‚¨úÔ∏èüü©üü©\nMinistral 8B: ‚¨úÔ∏èüü©üü©", reply_markup=kb.user)


@dp.message(F.photo)
async def GetPhotoID(message: Message):
    await message.answer(message.photo[-1].file_id)


async def main():
    await dp.start_polling(bot)

asyncio.run(main())
